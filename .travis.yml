
language: c
git:
  depth: 3
dist:
  trusty
cache:
  pip
    
branches:
  only:
    - master
    - dev

before_install:
    - sudo apt-get clean
    - sudo apt-get update -qq
    - sudo apt-get install -qq check libjson-c-dev

matrix:
  include:
    ## Coverage test
    - compiler: gcc
      env: ENABLE="--enable-gcov --enable-json"
      before_install:
        - pip install --user cpp-coveralls
        - sudo apt-get update -qq
        - sudo apt-get install -qq check libjson-c-dev
      after_success:
        - coveralls --exclude tests --exclude src/lexer.l --exclude src/lexer.c --exclude src/parser.c --exclude src/parser.y --exclude src/example.c --exclude src/util.c  --gcov-options '\-lp'

    ## Python bindings test w/o JSON (not compatible with gcov)
    ## also checks if everything works when JSON-C not present on machine
    - compiler: gcc
      env: ENABLE="--enable-python-bindings"
      before_install:
        - pip install --user cython
        - pip install --user biopython
        - sudo apt-get update -qq
        - sudo apt-get install -qq check
      after_failure: cat bindings/check-python.log

    ## Python bindings test w JSON (not compatible with gcov)
    - compiler: gcc
      env: ENABLE="--enable-python-bindings --enable-json"
      before_install:
        - pip install --user cython
        - pip install --user biopython
        - sudo apt-get update -qq
        - sudo apt-get install -qq check libjson-c-dev
      after_failure: cat bindings/check-python.log

    ## Test C library with clang
    - compiler: clang

    ## test that configuration works when JSON-C is disabled (but present)
    - compiler: clang
      env: ENABLE="--disable-json"
    - compiler: gcc
      env: ENABLE="--disable-json"

before_script:
  - autoreconf -i
  - ./configure --enable-check CFLAGS="-fPIC -O2" $ENABLE

script: make && make check

after_failure: cat test-api.log test-static.log test-memerr.log test-cli.log
