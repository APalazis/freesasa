#ifndef CLASSIFIER_H
#define CLASSIFIER_H

#include "freesasa_internal.h"

/**
    This classifier only has the sasa_class() and class2str()
    functions, which returns 1 for protein backbone atoms, and 0
    else. Backbone atoms are CA, N, C and O.
 */
extern const freesasa_classifier freesasa_backbone_classifier;

//! Classifier that classifies each atom according to residue
extern const freesasa_classifier freesasa_residue_classifier;


/**
    The following three structs and the following functions are only
    exposed in a header because the autogenerated static classifiers
    need to see them, they are not intended for use outside of this
    context. Therefore the functions to modify the structs are hidden
    inside classifier.c.

    Names of classes, types, etc are stored in arrays to simplify
    generic searching.
*/

/**
    Struct to store information about the types-section in a user-config.
 */
struct classifier_types {
    int n_classes; //!< number of classes
    int n_types; //!< number of types
    char **name; //!< names of types
    double *type_radius; //!< radius of type
    int *type_class; //!< class of each type
    char **class_name; //!< name of each type
};


/**
     Configuration info for each residue type.
 */
struct classifier_residue {
    int n_atoms; //!< Number of atoms
    char *name; //!< Name of residue
    char **atom_name; //!< Names of atoms
    double *atom_radius; //!< Atomic radii
    int *atom_class; //!< Classes of atoms
    freesasa_subarea max_area; //!< Maximum area (for RSA)
};

/* (merge with doc below) 

   Struct used for calculating classes and radii for atoms given their
   residue-names ('ALA','ARG',...) and atom-names ('CA','N',...). Some
   functions depend on classifiers where freesasa_classifier_class()
   returns 0 for apolar atoms and non-zero for polar atoms, for
   example freesasa_write_rsa() and freesasa_json_result(). Such
   classifiers will be referred to as polar classifiers. The static
   classifiers ::freesasa_protor_classifier (also known as
   ::freesasa_default_classifier), ::freesasa_naccess_classifier, and
   ::freesasa_oons_classifier are all polar classifier. The classifier
   interface allows for other configurations because there is
   sometimes need for more than two classes, or one might want to
   classify atoms along some other divide.
 */

/**
    Stores a user-configuration as extracted from a configuration
    file. No info about types, since those are only a tool used
    intermediately in assigment of radii and classes.
    
    An array of the names of residues is stored directly in the struct
    to facilitate searching for residues. The class_name array should
    be a clone of that found in struct types (can be done bye
    config_copy_classes()).

    Only for internal use.
 */
struct freesasa_classifier {
    int n_residues; //!< Number of residues
    int n_classes; //!< Number of classes
    char **residue_name; //!< Names of residues
    char **class_name; //!< Names of classes
    struct classifier_residue **residue;
    char *name;
    // temporary solution to allow refactoring
    int (*the_class)(const char *res_name,
                     const char *atom_name);
};

/**
    Get the VdW radius of an element
 */
double
freesasa_guess_radius(const char* symbol);

const freesasa_subarea *
freesasa_classifier_residue_reference(const freesasa_classifier *classifier,
                                      const char *res_name);


#endif /* CLASSIFIER_H */
