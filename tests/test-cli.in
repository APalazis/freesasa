#!/bin/bash

# The tests here mainly check that errors are caught and that
# execution is successful in normal cases. For some cases the output
# is compared with reference output, but the correctness of
# calculations is generally handled by the unit tests.

# Making this a .in-file was necessary to get 'make distcheck' to work

cli=../src/freesasa
datadir=@top_srcdir@/tests/data
sharedir=@top_srcdir@/share/
dump=tmp/test-cli.dump # will only contain the latest output
nofile=nonexistent-file
nodir=nonexistent-dir/file
#global errors
errors=0
use_xml=0
if [[ "x@USE_XML@" = "xyes" ]] ; then
    use_xml=1
fi
use_xmllint=0
if [[ "x@XMLLINT@" = "xxmllint" ]] ; then
    use_xmllint=1
fi
use_json=0
if [[ "x@USE_JSON@" = "xyes" ]] ; then
    use_json=1
fi
use_jsonlint=0
if [[ "x@JSONLINT@" = "xjsonlint" ]] ; then
    use_jsonlint=1
fi


function assert_pass
{
    eval $1 
    if [[ $? -ne 0 ]]; then 
        echo Error: \"$1\" failed
        let errors=errors+1
    #else 
    #    echo \"$1\" successful
    fi
}

function assert_fail
{
    eval $1 2>/dev/null
    if [[ $? -eq 0 ]]; then 
        echo Error: \"$1\" did not fail as expected
        let errors=errors+1
    #else 
    #    echo \"$1\" failed as expected;
    fi
}

function assert_equal_opt
{
    tmp1=tmp/tmp1
    tmp2=tmp/tmp2
    eval $1 $2 > $tmp1 2>/dev/null
    eval $1 $3 > $tmp2 2>/dev/null
    diff $tmp1 $tmp2
    if [[ $? -ne 0 ]]; then
        echo Error: \"$1\" gives different results with arguments \"$2\" and \"$3\"
        let errors=errors+1
    #else
    #    echo \"$1\" gives same result with arguments \"$2\" and \"$3\". Success.
    fi
}

if [[ ! -d tmp ]]; then mkdir tmp; fi

rm -f tmp/*
echo
echo "== Basic file errors =="
assert_fail "$cli > $dump"
assert_fail "$cli $nofile > $dump"
assert_fail "$cli < $nofile > $dump"
assert_fail "$cli -c $nofile < $datadir/1ubq.pdb > $dump"
assert_fail "$cli < $datadir/1ubq.pdb > $nodir"
assert_fail "$cli --B-value-file $nodir < $datadir/1ubq.pdb > $dump"
assert_fail "$cli --residue-type-file $nodir < $datadir/1ubq.pdb > $dump"
assert_fail "$cli --residue-file $nodir < $datadir/1ubq.pdb > $dump"
assert_fail "$cli -e $nodir $datadir/1ubq.pdb"
assert_fail "$cli -o $nodir $datadir/1ubq.pdb"
echo
echo "== General options =="
# unknown options
assert_fail "$cli --blablabla $datadir/1ubq.pdb"
assert_fail "$cli -x $datadir/1ubq.pdb"
# help message
assert_pass "$cli -h > $dump 2> /dev/null"
# check that it's a valid version number
version=`$cli -v | head -n 1`
assert_pass "echo $version | perl -ne 'if (m/FreeSASA (\d+\.)*\d$/) {exit 0} else  {exit 1}'"
echo
echo "== Testing S&R =="
assert_pass "$cli -S <  $datadir/1ubq.pdb > $dump"
echo
#check that output message has required components
assert_pass "grep 'source\s\s*: stdin' $dump"
$cli -S  $datadir/1ubq.pdb > $dump
assert_pass "grep 'source\s\s*: $datadir/1ubq.pdb' $dump"
assert_pass "grep 'atoms\s\s*: 602' $dump"
assert_pass "grep 'probe-radius\s\s*: [[:digit:]]' $dump"
assert_pass "grep 'threads\s\s*: [[:digit:]]' $dump"
assert_pass "grep 'testpoints\s\s*: [[:digit:]]' $dump"
assert_pass "grep 'algorithm\s\s*: \w' $dump"
assert_pass "grep 'Total\s\s*:\s\s*4834.72' $dump"
assert_pass "grep 'Polar\s\s*:\s\s*2515.82' $dump"
assert_pass "grep 'Apolar\s\s*:\s\s*2318.90' $dump"
# The above formulation of log output gives freedom in ordering and
# whitespace, and also version. Allows non-essential details to change
# without breaking the test. Will not be performed for variant
# parameter values, those should be covered by tests.
assert_pass "$cli -S -Y $datadir/1d3z.pdb -w > $dump"
assert_pass "grep 'atoms\s\s*: 1231' $dump"
assert_pass "grep 'Total\s\s*:\s\s*5035.61' $dump"
assert_pass "$cli -S -H -w $datadir/1ubq.pdb > $dump" # suppress warnings here
assert_pass "grep 'atoms\s\s*: 660' $dump"
assert_pass "grep 'Total\s\s*:\s\s*5656.65' $dump"
assert_pass "$cli -S -n 50 < $datadir/1ubq.pdb > $dump"
assert_fail "$cli -S -n 0 < $datadir/1ubq.pdb > $dump"
echo
echo "== Testing -m -M and -C options =="
# using flags -S and -n 10 to speed things up
assert_pass "$cli -n 2 -S -M $datadir/1d3z.pdb > $dump"
n_mod=`grep 1d3z.pdb $dump | wc -l`
assert_pass "test $n_mod -eq 10"
assert_pass "$cli -n 2 -S -C $datadir/1d3z.pdb > $dump"
n_mod=`grep 1d3z.pdb $dump | wc -l`
assert_pass "test $n_mod -eq 1"
assert_pass "$cli -n 2 -S -M -C $datadir/1d3z.pdb > $dump"
n_mod=`grep 1d3z.pdb $dump | wc -l`
assert_pass "test $n_mod -eq 10"
assert_pass "$cli -n 2 -S -M $datadir/2jo4.pdb > $dump"
n_mod=`grep 2jo4.pdb $dump | wc -l`
assert_pass "test $n_mod -eq 10"
assert_pass "$cli -n 2 -S -C $datadir/2jo4.pdb > $dump"
n_mod=`grep 2jo4.pdb $dump | wc -l`
assert_pass "test $n_mod -eq 4"
assert_pass "$cli -n 2 -S -M -C  $datadir/2jo4.pdb > $dump"
n_mod=`grep 2jo4.pdb $dump | wc -l`
assert_pass "test $n_mod -eq 40"
assert_fail "$cli -mM $datadir/2jo4.pdb > $dump"
echo
echo "== Testing L&R =="
assert_pass "$cli -L < $datadir/1ubq.pdb > $dump"
assert_pass "$cli -L -n 10 < $datadir/1ubq.pdb > $dump"
assert_fail "$cli -L -n 0 < $datadir/1ubq.pdb > $dump"
echo
echo "== Testing option --chain-groups =="
assert_pass "$cli -g A -S -n 10 $datadir/1ubq.pdb > $dump"
assert_fail "$cli -g B -S -n 10 $datadir/1ubq.pdb > $dump"
assert_pass "$cli -g AB -S -n 10 $datadir/2jo4.pdb > $dump"
assert_fail "$cli -g E -S -n 10 $datadir/2jo4.pdb > $dump"
assert_pass "$cli -g AB+CD -S -n 10 $datadir/2jo4.pdb > $dump"
assert_fail "$cli -g A-B -S -n 10 $datadir/2jo4.pdb > $dump"
echo
echo "== Testing B-factors =="
assert_pass "$cli -S -l -B < $datadir/1ubq.pdb > tmp/bfactor.pdb"
assert_pass "diff tmp/bfactor.pdb $datadir/1ubq.B.pdb"
assert_pass "$cli -S -l --B-value-file tmp/bfactor.pdb < $datadir/1ubq.pdb"
assert_pass "diff tmp/bfactor.pdb $datadir/1ubq.B.pdb"
echo
echo "== Testing probe radius =="
assert_fail "$cli -S -n 10 -p=-1 < $datadir/1ubq.pdb > $dump"
assert_pass "$cli -S -n 10 -p 1 < $datadir/1ubq.pdb > $dump"
assert_pass "$cli -S -p 1.4 --B-value-file tmp/bfactor.pdb < $datadir/1ubq.pdb > $dump"
assert_pass "diff tmp/bfactor.pdb $datadir/1ubq.B.pdb"
echo
echo "== Testing option -r =="
assert_pass "$cli -S -l -r < $datadir/1ubq.pdb > tmp/restype"
assert_pass "diff tmp/restype $datadir/restype.reference"
assert_pass "$cli -S -l --residue-type-file tmp/restype < $datadir/1ubq.pdb"
assert_pass "diff tmp/restype $datadir/restype.reference"
echo
echo "== Testing option -R =="
assert_pass "$cli -S -l -R < $datadir/1ubq.pdb > tmp/seq"
assert_pass "diff tmp/seq $datadir/seq.reference"
assert_pass "$cli -S -l --residue-file tmp/seq < $datadir/1ubq.pdb"
assert_pass "diff tmp/seq $datadir/seq.reference"
echo
echo "== Testing option --select =="
assert_pass "$cli -S --select \"s1, resn ala\" --select \"s2, resn arg\" --select \"s3, resi 1\" $datadir/1ubq.pdb > tmp/select"
sel_ala=$(grep s1 tmp/select | cut -f 2 -d ':' | sed 's/\ //g') 
res_ala=$(grep ALA tmp/restype | cut -f 2 -d ':' | sed 's/\ //g')
if [ "$res_ala" != "$sel_ala" ]; 
then 
    let errors=errors+1
    echo "Error: options -r and --select don't give same result for ALA ('$res_ala' and '$sel_ala')"
fi
sel_arg=$(grep s2 tmp/select | cut -f 2 -d ':' | sed 's/\ //g' | sed s/A2//)
res_arg=$(grep ARG tmp/restype | cut -f 2 -d ':' | sed 's/\ //g' | sed s/A2// | sed s/ARG//)
if [ "$res_arg" != "$sel_arg" ]
then 
    let errors=errors+1
    echo "Error: options -r and --select don't give same result for ARG ('$res_arg' and '$sel_arg')"
fi
sel_res1=$(grep s3 tmp/select | cut -f 2 -d ':' | sed 's/\ //g' | sed s/A2//)
seq_res1=$(grep " 1 " tmp/seq | cut -f 2 -d ':' | cut -f 2 -d 'T' | sed 's/ //g')
if [ "$seq_res1" != "$sel_res1" ]
then 
    let errors=errors+1
    echo "Error: options -R and --select don't give same result for first residue in 1ubq.pdb ('$seq_res1' and '$sel_res1')"
fi
echo
echo "== Testing option --unknown =="
assert_pass "$cli --unknown=guess -Y -w -n 2  $datadir/1d3z.pdb > $dump"
assert_pass "grep 1231 $dump"
assert_pass "$cli --unknown=skip -Y -w -n 2 $datadir/1d3z.pdb > $dump"
assert_pass "grep 602 $dump"
assert_fail "$cli --unknown=halt -Y -w -n 2 $datadir/1d3z.pdb > $dump"
# misspelling should fail
assert_fail "$cli --unknown=haltt -Y -w -n 2 $datadir/1d3z.pdb > $dump"
echo
echo "== Testing user-configurations =="
assert_pass "$cli -c $sharedir/naccess.config -n 3 < $datadir/1ubq.pdb > $dump"
assert_pass "$cli -c $sharedir/oons.config -n 3 < $datadir/1ubq.pdb > $dump"
assert_fail "$cli -c $datadir/err.config -n 3 < $datadir/1ubq.pdb > $dump"
# can't combine these options
assert_fail "$cli -c $datadir/naccess.config -n 3 -O < $datadir/1ubq.pdb > $dump"
assert_fail "$cli -c $datadir/naccess.config -n 3 --radii=naccess < $datadir/1ubq.pdb > $dump"
echo
echo "== Testing --radii" ==
assert_pass "$cli --radii=naccess -n 3 < $datadir/1ubq.pdb > tmp/static.dat"
assert_pass "$cli -c $sharedir/naccess.config -n 3 < $datadir/1ubq.pdb > tmp/from_config.dat"
assert_pass "diff tmp/static.dat tmp/from_config.dat"
assert_pass "$cli --radii=protor -n 3 < $datadir/1ubq.pdb > tmp/static.dat"
assert_pass "$cli -c $sharedir/protor.config -n 3 < $datadir/1ubq.pdb > tmp/from_config.dat"
assert_pass "diff tmp/static.dat tmp/from_config.dat"
assert_fail "$cli --radii=bla -n 3 < $datadir/1ubq.pdb > $dump"
echo
echo "== Testing RSA =="
for r in protor naccess
do
    for p in $(ls $datadir/rsa/A*A.pdb)
    do
        rel=$($cli -L -n 1000 $p --no-log --rsa --radii=$r | grep "A   2" | sed "s/[[:space:]]\{1,\}/ /g" | cut -f 6,8,10,12,14 -d ' ')
        if [[ $p == *"AGA"* ]]
        then
            assert_pass "test '$rel' = '100.0 N/A 100.0 100.0 100.0' && test $p"
        else
            assert_pass "test '$rel' = '100.0 100.0 100.0 100.0 100.0' && test $p"
        fi
    done
done
assert_pass "$cli --rsa-file=$dump $datadir/1ubq.pdb"
assert_pass "$cli --rsa-file=$dump $datadir/1ubq.pdb -c $sharedir/naccess.config"
# XML
if [[ use_xml -eq 1 ]] ; then
    echo
    echo "== Testing XML =="
    xml_file=tmp/1ubq.xml
    assert_pass "$cli --xml-file=$xml_file $datadir/1ubq.pdb"
    if [[ use_xmllint -eq 1 ]] ; then assert_pass "xmllint $xml_file > $dump"; fi
    assert_pass "$cli --xml --output-depth=atom $datadir/1ubq.pdb > $xml_file"
    if [[ use_xmllint -eq 1 ]] ; then assert_pass "xmllint $xml_file > $dump"; fi
    assert_pass "$cli --xml --output-depth=residue $datadir/1ubq.pdb > $xml_file"
    if [[ use_xmllint -eq 1 ]] ; then assert_pass "xmllint $xml_file > $dump"; fi
    assert_pass "$cli --xml --output-depth=chain $datadir/1ubq.pdb > $xml_file"
    if [[ use_xmllint -eq 1 ]] ; then assert_pass "xmllint $xml_file > $dump"; fi
    assert_pass "$cli --xml --output-depth=structure $datadir/1ubq.pdb > $xml_file"
    if [[ use_xmllint -eq 1 ]] ; then assert_pass "xmllint $xml_file > $dump"; fi
    assert_pass "xmllint $xml_file > $dump"
    # misspelling
    assert_fail "$cli --xml --output-depth=structures $datadir/1ubq.pdb > $xml_file"
fi
# JSON
if [[ use_json -eq 1 ]] ; then
    echo
    echo "== Testing JSON =="
    json_file=tmp/1ubq.json
    assert_pass "$cli --json-file=$json_file $datadir/1ubq.pdb"
    if [[ use_json -eq 1 ]] ; then assert_pass "jsonlint $xml_file > $dump"; fi
    assert_pass "$cli --json --output-depth=atom $datadir/1ubq.pdb > $json_file"
    if [[ use_json -eq 1 ]] ; then assert_pass "jsonlint $xml_file > $dump"; fi
fi
echo
echo "== Testing multithreading =="
assert_pass "$cli -t 1 -S -n 10 < $datadir/1ubq.pdb > $dump"
assert_pass "$cli -t 2 -S -n 10 < $datadir/1ubq.pdb > $dump"
assert_pass "$cli -t 10 -S -n 10 < $datadir/1ubq.pdb > $dump"
assert_pass "$cli -t 1 -L -n 3 < $datadir/1ubq.pdb > $dump"
assert_pass "$cli -t 2 -L -n 3 < $datadir/1ubq.pdb > $dump"
assert_pass "$cli -t 10 -L -n 3 < $datadir/1ubq.pdb > $dump"
assert_fail "$cli -t 0 < $datadir/1ubq.pdb > $dump"
echo 
echo "== Testing conflicting options =="
assert_fail "$cli -m -M $datadir/1ubq.pdb > $dump"
assert_fail "$cli -g A+B -C $datadir/1ubq.pdb > $dump"
assert_fail "$cli -c $sharedir/naccess.config --radii=naccess $datadir/1ubq.pdb > $dump"
assert_fail "$cli -O --radii=naccess $datadir/1ubq.pdb > $dump"
assert_fail "$cli -c $sharedir/naccess.config -O $datadir/1ubq.pdb > $dump"
echo
echo "== Testing long-options =="
assert_equal_opt "$cli $datadir/1ubq.pdb" "-h" "--help" 
assert_equal_opt "$cli $datadir/1ubq.pdb" "-v" "--version" 
assert_equal_opt "$cli $datadir/1ubq.pdb" "-S -n 10" "--shrake-rupley -n 10"
assert_equal_opt "$cli $datadir/1ubq.pdb" "-L -n 3 " "--lee-richards -n 3 "
assert_equal_opt "$cli $datadir/1ubq.pdb" "-p 1.5 -n 3" "--probe-radius=1.5 -n 3" 
assert_equal_opt "$cli $datadir/1ubq.pdb" "-L -n 3 " "-L --resolution=3 "
assert_equal_opt "$cli $datadir/1ubq.pdb" "-n 5" "--resolution=5"
assert_equal_opt "$cli $datadir/1ubq.pdb" "-t 4" "--n-threads=4"
assert_equal_opt "$cli $datadir/1ubq.pdb" "-c $sharedir/naccess.config" "--config-file=$sharedir/naccess.config"
assert_equal_opt "$cli $datadir/1ubq.pdb" "-H -w" "--hetatm -w"
assert_equal_opt "$cli $datadir/1d3z.pdb" "-Y -n 2" "--hydrogen -n 2"
assert_equal_opt "$cli $datadir/1d3z.pdb" "-m -n 2" "--join-models -n 2"
assert_equal_opt "$cli $datadir/1d3z.pdb" "-C -n 2" "--separate-chains -n 2"
assert_equal_opt "$cli $datadir/1d3z.pdb" "-M -n 2" "--separate-models -n 2"
assert_equal_opt "$cli $datadir/1ubq.pdb" "-l -n 2" "--no-log -n 2"
assert_equal_opt "$cli $datadir/1ubq.pdb" "-w -n 2" "--no-warnings -n 2"
assert_equal_opt "$cli $datadir/1ubq.pdb" "-r -n 2" "--foreach-residue-type -n 2"
assert_equal_opt "$cli $datadir/1ubq.pdb" "-R -n 2" "--foreach-residue -n 2"
assert_equal_opt "$cli $datadir/1ubq.pdb" "-B -n 2" "--print-as-B-values -n 2"
assert_equal_opt "$cli $datadir/2jo4.pdb" "-g AB+CD -n 2" "--chain-groups AB+CD -n 2"
assert_equal_opt "$cli $datadir/2jo4.pdb" "-g AB+CD -n 2" "-g AB -g CD -n 2"
assert_equal_opt "$cli $datadir/1ubq.B.pdb" "-O -n 2" "--radius-from-occupancy -n 2"
rm -f tmp/*

echo
echo "There where $errors errors."
echo
if [ $errors -gt 0 ]; then 
    exit $errors
else
    exit 0
fi
