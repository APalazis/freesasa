#!/bin/bash

# The tests here mainly check that errors are caught and that
# execution is successful in normal cases. For some cases the output
# is compared with reference output, but the correctness of
# calculations is generally handled by the unit tests.

# Making this a .in-file was necessary to get 'make distcheck' to work

cli=../src/freesasa
datadir=@top_srcdir@/tests/data
sharedir=@top_srcdir@/share/
dump=tmp/test-cli.dump # will only contain the latest output
nofile=nonexistent-file
nodir=nonexistent-dir/file
#global errors
errors=0

function assert_pass
{
    eval $1 
    if [[ $? -ne 0 ]]; then 
        echo Error: \"$1\" failed
        let errors=errors+1
    else 
        echo \"$1\" successful
    fi
}

function assert_fail
{
    eval $1 2>/dev/null
    if [[ $? -eq 0 ]]; then 
        echo Error: \"$1\" did not fail as expected
        let errors=errors+1
    else 
        echo \"$1\" failed as expected;
    fi
}

function assert_equal_opt
{
    tmp1=tmp/tmp1
    tmp2=tmp/tmp2
    eval $1 $2 > $tmp1 2>/dev/null
    eval $1 $3 > $tmp2 2>/dev/null
    diff $tmp1 $tmp2
    if [[ $? -ne 0 ]]; then
        echo Error: \"$1\" gives different results with arguments \"$2\" and \"$3\"
        let errors=errors+1
    else
        echo \"$1\" gives same result with arguments \"$2\" and \"$3\". Success.
    fi
}

if [[ ! -d tmp ]]; then mkdir tmp; fi

rm -f tmp/*
echo
echo "== Basic file errors =="
assert_fail "$cli > $dump"
assert_fail "$cli $nofile > $dump"
assert_fail "$cli < $nofile > $dump"
assert_fail "$cli -c $nofile < $datadir/1ubq.pdb > $dump"
assert_fail "$cli < $datadir/1ubq.pdb > $nodir"
assert_fail "$cli -B$nodir < $datadir/1ubq.pdb > $dump"
assert_fail "$cli -r$nodir < $datadir/1ubq.pdb > $dump"
assert_fail "$cli -R$nodir < $datadir/1ubq.pdb > $dump"
echo
echo "== General options =="
assert_pass "$cli -h > $dump 2> /dev/null"
version=`$cli -v`
# check that it's a valid version number
assert_pass "echo $version | perl -ne 'if (m/^\d+\.(\d+\.)+\d$/) {exit 0} else  {exit 1}'"
echo
echo "== Testing S&R =="
assert_pass "$cli < $datadir/1ubq.pdb > $dump"
echo
#check that output message has required components
assert_pass "grep 'name: stdin' $dump"
$cli $datadir/1ubq.pdb > $dump
assert_pass "grep 'name: $datadir/1ubq.pdb' $dump"
assert_pass "grep 'n_atoms: 602' $dump"
assert_pass "grep 'probe-radius: \d' $dump"
assert_pass "grep 'n_thread: \d' $dump"
assert_pass "grep 'n_testpoint: \d' $dump"
assert_pass "grep 'algorithm: \w' $dump"
assert_pass "grep 'Total:\s\s*4779.51 A2' $dump"
assert_pass "grep 'Polar:\s\s*2236.93 A2' $dump"
assert_pass "grep 'Apolar:\s\s*2542.58 A2' $dump"
# The above formulation of log output gives freedom in ordering and
# whitespace, and also version. Allows non-essential details to change
# without breaking the test. Will not be performed for variant
# parameter values, those should be covered by tests.
assert_pass "$cli -Y $datadir/1d3z.pdb > $dump"
assert_pass "grep 'n_atoms: 1231' $dump"
assert_pass "grep 'Total:\s\s*4945.87 A2' $dump"
assert_pass "$cli -H -w $datadir/1ubq.pdb > $dump" # suppress warnings here
assert_pass "grep 'n_atoms: 660' $dump"
assert_pass "grep 'Total:\s\s*5595.90 A2' $dump"
assert_pass "$cli -n 50 < $datadir/1ubq.pdb > $dump"
assert_fail "$cli -n 0 < $datadir/1ubq.pdb > $dump"
echo
echo "== Testing -m -M and -C options =="
assert_pass "$cli -M $datadir/1d3z.pdb > $dump"
n_mod=`grep 1d3z.pdb $dump | wc -l`
assert_pass "test $n_mod -eq 10"
assert_pass "$cli -C $datadir/1d3z.pdb > $dump"
n_mod=`grep 1d3z.pdb $dump | wc -l`
assert_pass "test $n_mod -eq 1"
assert_pass "$cli -M -C $datadir/1d3z.pdb > $dump"
n_mod=`grep 1d3z.pdb $dump | wc -l`
assert_pass "test $n_mod -eq 10"
assert_pass "$cli -M $datadir/2jo4.pdb > $dump"
n_mod=`grep 2jo4.pdb $dump | wc -l`
assert_pass "test $n_mod -eq 10"
assert_pass "$cli -C $datadir/2jo4.pdb > $dump"
n_mod=`grep 2jo4.pdb $dump | wc -l`
assert_pass "test $n_mod -eq 4"
assert_pass "$cli -M -C  $datadir/2jo4.pdb > $dump"
n_mod=`grep 2jo4.pdb $dump | wc -l`
assert_pass "test $n_mod -eq 40"
assert_fail "$cli -mM $datadir/2jo4.pdb > $dump"
echo
echo "== Testing L&R =="
assert_pass "$cli -L < $datadir/1ubq.pdb > $dump"
assert_pass "$cli -L -n 10 < $datadir/1ubq.pdb > $dump"
assert_fail "$cli -L -n 0 < $datadir/1ubq.pdb > $dump"
echo
echo "== Testing option chain groups =="
assert_pass "$cli -g A $datadir/1ubq.pdb > $dump"
assert_fail "$cli -g B $datadir/1ubq.pdb > $dump"
assert_pass "$cli -g AB $datadir/2jo4.pdb > $dump"
assert_fail "$cli -g E $datadir/2jo4.pdb > $dump"
assert_pass "$cli -g AB+CD $datadir/2jo4.pdb > $dump"
echo
echo "== Testing B-factors =="
assert_pass "$cli -l -B < $datadir/1ubq.pdb > tmp/bfactor.pdb"
assert_pass "diff tmp/bfactor.pdb $datadir/1ubq.B.pdb"
assert_pass "$cli -l --B-value-file tmp/bfactor.pdb < $datadir/1ubq.pdb"
assert_pass "diff tmp/bfactor.pdb $datadir/1ubq.B.pdb"
echo
echo "== Testing probe radius =="
assert_fail "$cli -p -1 < $datadir/1ubq.pdb > $dump"
assert_pass "$cli -p 1 < $datadir/1ubq.pdb > $dump"
assert_pass "$cli -p 1.4 --B-value-file tmp/bfactor.pdb < $datadir/1ubq.pdb > $dump"
assert_pass "diff tmp/bfactor.pdb $datadir/1ubq.B.pdb"
echo
echo "== Testing option -r =="
assert_pass "$cli -l -r < $datadir/1ubq.pdb > tmp/restype"
assert_pass "diff tmp/restype $datadir/restype.reference"
assert_pass "$cli -l --residue-type-file tmp/restype < $datadir/1ubq.pdb"
assert_pass "diff tmp/restype $datadir/restype.reference"
echo
echo "== Testing option -R =="
assert_pass "$cli -l -R < $datadir/1ubq.pdb > tmp/seq"
assert_pass "diff tmp/seq $datadir/seq.reference"
assert_pass "$cli -l --residue-file tmp/seq < $datadir/1ubq.pdb"
assert_pass "diff tmp/seq $datadir/seq.reference"
echo
echo "== Testing user-configurations =="
assert_pass "$cli -c $sharedir/naccess.config < $datadir/1ubq.pdb > $dump"
assert_pass "$cli -c $sharedir/oons.config < $datadir/1ubq.pdb > $dump"
assert_fail "$cli -c $datadir/err.config < $datadir/1ubq.pdb > $dump"
echo
echo "== Testing multithreading =="
assert_pass "$cli -t 1 < $datadir/1ubq.pdb > $dump"
assert_pass "$cli -t 2 < $datadir/1ubq.pdb > $dump"
assert_pass "$cli -t 10 < $datadir/1ubq.pdb > $dump"
assert_pass "$cli -t 1 -L < $datadir/1ubq.pdb > $dump"
assert_pass "$cli -t 2 -L < $datadir/1ubq.pdb > $dump"
assert_pass "$cli -t 10 -L < $datadir/1ubq.pdb > $dump"
assert_fail "$cli -t 0 < $datadir/1ubq.pdb > $dump"
echo
echo "== Testing long-options =="
assert_equal_opt "$cli $datadir/1ubq.pdb" "-h" "--help" 
assert_equal_opt "$cli $datadir/1ubq.pdb" "-v" "--version" 
assert_equal_opt "$cli $datadir/1ubq.pdb" "-S" "--shrake-rupley" 
assert_equal_opt "$cli $datadir/1ubq.pdb" "-L" "--lee-richards"
assert_equal_opt "$cli $datadir/1ubq.pdb" "-p 1.5" "--probe-radius=1.5" 
assert_equal_opt "$cli $datadir/1ubq.pdb" "-L -n 20" "-L --resolution=20"
assert_equal_opt "$cli $datadir/1ubq.pdb" "-n 50" "--resolution=50"
assert_equal_opt "$cli $datadir/1ubq.pdb" "-t 4" "--n-threads=4"
assert_equal_opt "$cli $datadir/1ubq.pdb" "-c $sharedir/naccess.config" "--config-file=$sharedir/naccess.config"
assert_equal_opt "$cli $datadir/1ubq.pdb" "-H -w" "--hetatm -w"
assert_equal_opt "$cli $datadir/1d3z.pdb" "-Y" "--hydrogen"
assert_equal_opt "$cli $datadir/1d3z.pdb" "-m" "--join-models"
assert_equal_opt "$cli $datadir/1d3z.pdb" "-C" "--separate-chains"
assert_equal_opt "$cli $datadir/1d3z.pdb" "-M" "--separate-models"
assert_equal_opt "$cli $datadir/1ubq.pdb" "-l" "--no-log"
assert_equal_opt "$cli $datadir/1ubq.pdb" "-w" "--no-warnings"
assert_equal_opt "$cli $datadir/1ubq.pdb" "-r" "--foreach-residue-type"
assert_equal_opt "$cli $datadir/1ubq.pdb" "-R" "--foreach-residue"
assert_equal_opt "$cli $datadir/1ubq.pdb" "-B" "--print-as-B-values"
assert_equal_opt "$cli $datadir/2jo4.pdb" "-g AB+CD" "--chain-groups AB+CD"
assert_equal_opt "$cli $datadir/2jo4.pdb" "-g AB+CD" "-g AB -g CD"

rm -f tmp/*

echo
echo "There where $errors errors."
echo
if [ $errors -gt 0 ]; then 
    exit $errors
else
    exit 0
fi